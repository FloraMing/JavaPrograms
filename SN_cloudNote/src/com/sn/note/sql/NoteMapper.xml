<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间(包名.类名）,作用就是对sql进行分类化管理(sql隔离) -->
<!-- 辅配置文件 -->
<mapper namespace="com.sn.note.dao.NoteDao">

	<!-- 根据bookId查询某个笔记本下的所有笔记 -->
	<select id="findByBookId" parameterType="string"
		resultType="com.sn.note.entity.Note">
		select * from cn_note where
		cn_notebook_id=#{cn_notebook_id} and
		cn_note_status_id='1' order by
		cn_note_create_time desc
	</select>

	<!-- 添加笔记 -->
	<insert id="addNotes" parameterType="com.sn.note.entity.Note">
		insert into cn_note
		values(#{cn_note_id},#{cn_notebook_id},#{cn_user_id},
		#{cn_note_status_id},#{cn_note_type_id},#{cn_note_title},
		#{cn_note_body},#{cn_note_create_time},#{cn_note_last_modify_time})
	</insert>

	<select id="findNoteByNoteId" parameterType="string"
		resultType="com.sn.note.entity.Note">
		select * from cn_note where cn_note_id=#{cn_note_id}
	</select>
	
	<select id="findNoteByNoteName" parameterType="string"
		resultType="com.sn.note.entity.Note">
		select * from cn_note where cn_note_title=#{cn_note_title}
	</select>
	

	<!--修改笔记 -->
	<update id="updateNote" parameterType="com.sn.note.entity.Note">
		update cn_note set
		cn_note_title=#{cn_note_title},
		cn_note_body=#{cn_note_body},
		cn_note_last_modify_time=#{cn_note_last_modify_time}
		where
		cn_note_id=#{cn_note_id}
	</update>

	<!-- 删除笔记(修改笔记的状态，放入回收站) -->
	<update id="deleteNote" parameterType="string">
		update cn_note set
		cn_note_status_id='2' where cn_note_id=#{id}
	</update>

    <!-- 根据被删除笔记的id查找笔记 -->
	<select id="findDeleteNotesById" parameterType="string" resultType="com.sn.note.entity.Note">
		select cn_note_id,cn_note_title from cn_note
		where cn_note_status_id='2' and cn_user_id=#{userId}
	</select>
	
	<!-- 恢复笔记本 -->
	<update id="replayNote" parameterType="com.sn.note.entity.Note"> 
		update cn_note set cn_note_status_id = 1,
		cn_notebook_id = #{cn_notebook_id} 
		where cn_note_id = #{cn_note_id}
	</update>
	
	<!-- 彻底删除笔记（可被动态删除替代） -->
	<delete id="realDeleteNote" parameterType="string">
		delete from cn_note
		where cn_note_id = #{cn_note_id}
	</delete>

	<!-- 动态删除，一次可以删除多条笔记 -->
	<delete id="deleteNotes">
		delete from cn_note
		where cn_note_id in
		<foreach collection="array" item="id" open="(" close=")"
			separator=",">
			#{id}
		</foreach>
	</delete>

	<!-- 动态更新(可用于移动笔记） -->
	<update id="dynamicUpdate" parameterType="com.sn.note.entity.Note">
		update cn_note
		<set>
			<if test="cn_note_type_id!=null">
				cn_note_type_id=#{cn_note_type_id},
			</if>
			<if test="cn_note_status_id!=null">
				cn_note_status_id=#{cn_note_status_id},
			</if>
			<if test="cn_notebook_id!=null">
				cn_notebook_id=#{cn_notebook_id},
			</if>
			<if test="cn_note_title!=null">
				cn_note_title=#{cn_note_title},
			</if>
			<if test="cn_note_body!=null">
				cn_note_body=#{cn_note_body},
			</if>
			<if test="cn_note_last_modify_time!=null">
				cn_note_last_modify_time=#{cn_note_last_modify_time}
			</if>
		</set>
		where cn_note_id=#{cn_note_id}
	</update>

	<!-- 回收站笔记 -->
	<select id="rollBackNote" parameterType="string"
		resultType="com.sn.note.entity.Note">
		select cn_note_title,cn_note_id from cn_note where
		cn_user_id=#{userid} and cn_note_status_id='2'
	</select>

</mapper>










